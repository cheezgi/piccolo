
(* builtin: char, alpha, alphanumeric, number *)

grammar = piccolo;
piccolo = {stmt | fn | data};
fn = "fn", name, "(", [name, {",", name}], ")", block;
name = alpha, {alphanumeric};
block = "do", {stmt}, "end";
stmt = expr | assignment | retn | err | flow, nl;
expr = paren | access | name | literal | fncall | math | construct | index;
paren = "(", expr, ")";
access = expr, ".", expr;
flow = if | while | for;
if = "if", expr, block, ["else", block];
while = "while", expr, block;
for = "for", name, "in", expr, block;
literal = number | string | bool | exrange | inrange | array;
string = "\"", {char}, "\"";
bool = "true" | "false";
exrange = expr, "..", expr;
inrange = expr, "...", expr;
array = "[", [expr, {",", expr}], "]";
fncall = expr, "(", [expr, [{",", expr}]], ")";
(* math = (unary, expr) | (expr, op, expr); *)
(* unary = "-" | "!"; *)
(* op = "+" | "*" | "-" | "/" | "%" | "&" | "|" | "^" | "||" | "&&" | "==" | "!=" | ">=" | "<=" | ">" | "<"; *)
construct = "new", name, ["(", [assignment, {",", assignment}], ")"];
index = expr, "[", expr, "]";
assignment = name, "=", expr;
retn = "retn", expr;
err = "err", expr;
nl = "\n";
data = "data", name, "is", [["pub"], assignment, {",", ["pub"], assignment}], {fn}, "end";

math = and, {"&&", and};
and = or, {"||", or};
or = comparison, {"!=" | "==", comparison};
comparison = addition, {">" | ">=" | "<" | "<=", addition};
addition = multip1ication, {"-" | "+", multiplication};
multiplication = unary, {"/" | "*", unary};
unary = ("!" | "-", unary) | primary;
primary = number | string | "false" | "true" | paren;

